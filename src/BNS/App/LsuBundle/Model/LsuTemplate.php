<?php

namespace BNS\App\LsuBundle\Model;

use BNS\App\LsuBundle\Model\om\BaseLsuTemplate;
use PropelPDO;

class LsuTemplate extends BaseLsuTemplate
{
    protected $totalCompletion;

    protected $completion;

    protected $userCompletions;

    protected $completionDomains;

    /**
     * @return mixed
     */
    public function getTotalCompletion()
    {
        return $this->totalCompletion;
    }

    /**
     * @param mixed $totalCompletion
     * @return LsuTemplate
     */
    public function setTotalCompletion($totalCompletion)
    {
        $this->totalCompletion = $totalCompletion;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCompletion()
    {
        return $this->completion;
    }

    /**
     * @param mixed $completion
     * @return LsuTemplate
     */
    public function setCompletion($completion)
    {
        $this->completion = $completion;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getUserCompletions()
    {
        return $this->userCompletions;
    }

    /**
     * @param mixed $userCompletions
     * @return LsuTemplate
     */
    public function setUserCompletions($userCompletions)
    {
        $this->userCompletions = $userCompletions;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getCompletionDomains()
    {
        return $this->completionDomains;
    }

    /**
     * @param mixed $completionDomains
     * @return LsuTemplate
     */
    public function setCompletionDomains($completionDomains)
    {
        $this->completionDomains = $completionDomains;

        return $this;
    }

    public function getPeriodIndex()
    {
        $periods = LsuTemplateQuery::create()
            ->filterByIsCycleEnd($this->getIsCycleEnd())
            ->filterByConfigId($this->getConfigId())
            ->filterByYear($this->getYear())
            ->orderByStartedAt(\Criteria::ASC)
            ->select(['Id'])
            ->find()
            ->getArrayCopy()
        ;

        return [
            'index' => array_search($this->getId(), $periods) + 1,
            'total' => count($periods)
        ];
    }

    public function getIndex()
    {
        return $this->getPeriodIndex()['index'];
    }

    public function getTotal()
    {
        return $this->getPeriodIndex()['total'];
    }

    public function hasDetails()
    {
        if ($this->getLsuConfig()) {
            return 'cycle1' !== $this->getLsuConfig()->getLsuLevel()->getCycle();
        }

        return null;
    }

    /**
     * @inheritDoc
     */
    public function preSave(PropelPDO $con = null)
    {
        if ($this->getStartedAt()) {
            /** @var \DateTime $date */
            $date = $this->getStartedAt();
            if ($date->format('m') >= '08') {
                $year = $date->format('Y');
            } else {
                $year = $date->format('Y') - 1;
            }
            $this->setYear($year);
        }
        return parent::preSave($con); // TODO: Change the autogenerated stub
    }


}
